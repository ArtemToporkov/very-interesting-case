import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
import aiohttp

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = '7757580544:AAHMXO0sgFFvNJMIDksbxqc9zYHrNNGo-rA'

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
reply_keyboard = [
    ["/fact", "/help"],
    ["/start", "/stop"]
]
markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True)

async def get_random_fact():
    url = 'https://uselessfacts.jsph.pl/random.json?language=en'
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, timeout=5) as response:
                if response.status == 200:
                    data = await response.json()
                    return data.get('text')
                return '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–∫—Ç üòû (–æ—à–∏–±–∫–∞ API)'
    except Exception as e:
        logger.error(f"Error fetching fact: {e}")
        return '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–∫—Ç üòû (–æ—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è)'

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º–∏ —Ñ–∞–∫—Ç–∞–º–∏. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:',
        reply_markup=markup
    )

async def fact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    fact_text = await get_random_fact()
    await update.message.reply_text(fact_text, reply_markup=markup)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/fact - —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç\n"
        "/help - –ø–æ–º–æ—â—å",
        reply_markup=markup
    )

async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –ù–∞–∂–º–∏—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–æ–≤–∞.",
        reply_markup=ReplyKeyboardMarkup([["/start"]], resize_keyboard=True)
    )

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("fact", fact))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("stop", stop))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == '__main__':
    main()